#+TITLE: SpeakEasy2: Champagne community detection

[[https://genomebiology.biomedcentral.com/articles/10.1186/s13059-023-03062-0][https://img.shields.io/badge/publication-Genome_Biology-%2300A1D7.svg]]

This is a port of the SpeakEasy 2 (SE2) community detection algorithm rewritten in C with the help of the [[https://igraph.org/][igraph C library]].
The original MATLAB code can be found at [[https://github.com/cogdishion/SE2][SE2]].

The main intent of this project is to provide a core C library that can be used to provide packages for high-level languages: [[https://github.com/SpeakEasy-2/speakeasy2-toolbox][MATLAB toolbox]], [[https://github.com/SpeakEasy-2/python-speakeasy2][python package]], and [[https://github.com/SpeakEasy-2/speakeasyR][R package]].

At the moment, implementation performs a subset of the original MATLAB version.
Specifically, this version does not provide confidence for node membership or overlapping community detection.

* Building from source
The easiest way to use this library is through the above mentioned high-level packages.
They can be obtained through the languages package repository (follow the link to desired languages package for more information).

For using in C or to develop the library, CMake can be used to build the project.

When downloading the source, be aware git submodules are used to manage some dependencies.
In addition to the normal clone command:

#+begin_src bash :eval no
  git clone "https://github.com/SpeakEasy-2/libspeakeasy2"
  cd libspeakeasy2
#+end_src

Setup the git submodules with:

#+begin_src bash :eval no
  git submodule update --init --recursive
#+end_src

Then, to build run:
#+begin_src bash :eval no
  cmake -B build .
  cmake --build build
#+end_src

This will build SpeakEasy 2 as a static library.
To build a shared library, define ~-D BUILD_SHARED_LIBS=ON~ in the configure step:

#+begin_src bash :eval no
  cmake -B build -D BUILD_SHARED_LIBS=ON .
#+end_src

If ~pthreads~ is found, the library will be compiled to run in parallel. To turn off parallel processing use the ~-D SE2_PARALLEL=OFF~ in the configure step. At run time using ~max_threads = 1~ will also turn off parallel processing.

* Examples
For a simple example, we can run SE2 on the Zachary Karate Club graph.

#+begin_src C :eval no
  #include <speak_easy_2.h>

  int main()
  {
    igraph_t graph;
    igraph_famous(&graph, "Zachary");
    igraph_vector_int_t membership;
    se2_options opts = {};

    speak_easy_2(&graph, NULL, &opts, &membership);

    igraph_destroy(&graph);

    printf("[");
    for (igraph_integer_t i = 0; i < igraph_vector_int_size(&membership); i++) {
      printf(" %"IGRAPH_PRId, VECTOR(membership)[i]);
    }
    printf(" ]\n");

    igraph_vector_int_destroy(&membership);

    return EXIT_SUCCESS;
  }
#+end_src

A graph with clear community structure can be generated using ~igraph~'s preference random game.
An example is contained in an external file, [[file:examples/block.c]].
Building the project will create an executable under ~build/examples/block~ that will display the resulting membership and print an ASCII representation of the adjacency matrix.

#+NAME: strip
#+BEGIN_SRC elisp :var text="\e[31mHello World\e[0m" :exports none
(ansi-color-apply text)
#+END_SRC

#+begin_src bash :exports both :eval yes :results output code :post strip(*this*)
  build/examples/block
#+end_src

#+RESULTS:
#+begin_src bash
  Approximate edge density is 0.264493.
  Input type treated as unweighted.

  Calling main routine at level 1.
  Completed generating initial labels.
  Produced 10 seed labels, while goal was 10.

  Starting level 1 clustering; independent runs might not be displayed in order - that is okay...
  Starting independent run #1 of 10
  Starting independent run #2 of 10
  Starting independent run #3 of 10
  Starting independent run #4 of 10
  Starting independent run #5 of 10
  Starting independent run #6 of 10
  Starting independent run #7 of 10
  Starting independent run #8 of 10
  Starting independent run #9 of 10
  Starting independent run #10 of 10

  Generated 50 partitions at level 1.
  Mean of all NMIs is 0.94963.

  Membership
  [ 1 1 1 1 2 2 2 3 4 4 4 4 4 4 0 0 0 0 0 0 0 0 0 0 ]

  NMI against Ground truth
  0.965428

  Adjacency matrix
  | - A A . A A A A . A * * . . . . . . . . . * . . |
  | A - A A A A A A A . . . . . * . . . . . * . . . |
  | A A - A A A A A A A . . . . . . . . . . . * . . |
  | . A A - A A A A A A . . . * . . . . . . * . . . |
  | A A A A - A A A A A * . . . . . . . . . . . . . |
  | A A A A A - A A . A . . . . . . . . . . * . . . |
  | A A A A A A - A A . . . . . . . . . . * . . . . |
  | A A A A A A A - A . . . . . . . . . . . . . . . |
  | . A A A A . A A - . . . . . . . . . . . . . . * |
  | A . A A A A . . . - . . . . . . * . . . . . . . |
  | * . . . * . . . . . - E . E E E . . . . . . . . |
  | * . . . . . . . . . E - E E E . . . . . . . . . |
  | . . . . . . . . . . . E - E E E * . . . . . . . |
  | . . . * . . . . . . E E E - . . . . . . . . . . |
  | . * . . . . . . . . E E E . - . . . . . . . . . |
  | . . . . . . . . . . E . E . . - . . . . . . * . |
  | . . . . . . . . . * . . * . . . - B B B . . . . |
  | . . . . . . . . . . . . . . . . B - B . * . . . |
  | . . . . . . . . . . . . . . . . B B - B . . . . |
  | . . . . . . * . . . . . . . . . B . B - . . . . |
  | . * . * . * . . . . . . . . . . . * . . - C C * |
  | * . * . . . . . . . . . . . . . . . . . C - C . |
  | . . . . . . . . . . . . . . . * . . . . C C - . |
  | . . . . . . . . * . . . . . . . . . . . * . . - |
#+end_src

In the above adjacency matrix, the letters represent edges that are within the community represented by that letter and the asterisks represent edges between communities.
The nodes are ordered based on the ground truth community structure used to generate the graph.

* Options
In the above "Zachary" example, there is a line defining and initializing a `se2_options` structure, but is does not set any options.
The options are defined in the table below:

| Option            | type    |                    default | effect                                                                                                                                                                                                                         |
|-------------------+---------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| independent_runs  | integer |                         10 | number of independent runs to perform. Each run gets its own set of initial conditions.                                                                                                                                        |
| target_partitions | integer |                          5 | Number of partitions to find per independent run.                                                                                                                                                                              |
| discard_transient | integer |                          3 | Ignore this many partitions before tracking.                                                                                                                                                                                   |
| target_clusters   | integer | dependent on size of graph | Expected number of clusters to find. Used for creating the initial conditions. The final partition is not constrained to having this many clusters.                                                                            |
| subcluster        | integer |                          1 | Degree of subclustering. If greater than 1, each initial community is independently subclustered into a smaller set of communities. In turn those communities are further subclustered and so on ~subcluster~ number of times. |
| minclust          | integer |                          5 | The minimum size of a cluster to consider for subclustering. If a cluster has fewer nodes than this, it will not be further subclustered.                                                                                      |
| random_seed       | integer |         randomly generated | a random seed for reproducibility.                                                                                                                                                                                             |
| max_threads       | integer |  value of ~independent_runs~  | number of threads to create. (Use 1 to prevent parallel processing.) A value less than the number of processing cores will limit the number of cores used.                                                                     |
| verbose           | boolean |                      false | Whether to print extra information about the running process.                                                                                                                                                                  |

Using the ~se2_options~ struct, options can be set, for example, by replacing the above line with:

#+begin_src diff

  - se2_options opts = {};
  + se2_options opts = {
  +	random_seed = 1234,
  +	verbose = true,
  +	independent_runs = 5
  + };
#+end_src
